
running 1 test
<Input>


x = 15
y = 45j
z = x + y


</Input>
Tokens(23):
----------------------------------------
  0:         Newline         "\n"        W(Newline)
  1:            Name          x               Ident
  3:           Equal          =                None
  5:          Number          15             N(Int)
  6:         Newline         "\n"        W(Newline)
  7:            Name          y               Ident
  9:           Equal          =                None
 11:          Number         45j         N(Complex)
 12:         Newline         "\n"        W(Newline)
 13:            Name          z               Ident
 15:           Equal          =                None
 17:            Name          x               Ident
 19:            Plus          +                None
 21:            Name          y               Ident
 22:         Newline         "\n"        W(Newline)

Ast(tokens: 23)
{
  "Module": {
    "Body": [
      "Newline",
      {
        "Assign": {
          "target": {
            "Constant": {
              "id": "Name",
              "bytes": [
                120
              ],
              "tag": "Ident"
            }
          },
          "value": {
            "Constant": {
              "id": "Number",
              "bytes": [
                49,
                53
              ],
              "tag": {
                "N": "Int"
              }
            }
          }
        }
      },
      "Newline",
      {
        "Assign": {
          "target": {
            "Constant": {
              "id": "Name",
              "bytes": [
                121
              ],
              "tag": "Ident"
            }
          },
          "value": {
            "Constant": {
              "id": "Number",
              "bytes": [
                52,
                53,
                106
              ],
              "tag": {
                "N": "Complex"
              }
            }
          }
        }
      },
      "Newline",
      {
        "Assign": {
          "target": {
            "Constant": {
              "id": "Name",
              "bytes": [
                122
              ],
              "tag": "Ident"
            }
          },
          "value": {
            "BinOp": {
              "op": {
                "id": "Plus",
                "bytes": [
                  43
                ],
                "tag": "None"
              },
              "left": {
                "Constant": {
                  "id": "Name",
                  "bytes": [
                    120
                  ],
                  "tag": "Ident"
                }
              },
              "right": {
                "Constant": {
                  "id": "Name",
                  "bytes": [
                    121
                  ],
                  "tag": "Ident"
                }
              }
            }
          }
        }
      },
      "Newline"
    ]
  }
}
CompileAST(Module(Body([Newline, Assign { target: Constant(Tk { id: Name, bytes: [120], tag: Ident }), value: Constant(Tk { id: Number, bytes: [49, 53], tag: N(Int) }) }, Newline, Assign { target: Constant(Tk { id: Name, bytes: [121], tag: Ident }), value: Constant(Tk { id: Number, bytes: [52, 53, 106], tag: N(Complex) }) }, Newline, Assign { target: Constant(Tk { id: Name, bytes: [122], tag: Ident }), value: BinOp { op: Op(Tk { id: Plus, bytes: [43], tag: None }), left: Constant(Tk { id: Name, bytes: [120], tag: Ident }), right: Constant(Tk { id: Name, bytes: [121], tag: Ident }) } }, Newline])))
CompileModule(Body([Newline, Assign { target: Constant(Tk { id: Name, bytes: [120], tag: Ident }), value: Constant(Tk { id: Number, bytes: [49, 53], tag: N(Int) }) }, Newline, Assign { target: Constant(Tk { id: Name, bytes: [121], tag: Ident }), value: Constant(Tk { id: Number, bytes: [52, 53, 106], tag: N(Complex) }) }, Newline, Assign { target: Constant(Tk { id: Name, bytes: [122], tag: Ident }), value: BinOp { op: Op(Tk { id: Plus, bytes: [43], tag: None }), left: Constant(Tk { id: Name, bytes: [120], tag: Ident }), right: Constant(Tk { id: Name, bytes: [121], tag: Ident }) } }, Newline]))
CompileAssignment(target=Constant(Tk { id: Name, bytes: [120], tag: Ident }), value=Constant(Tk { id: Number, bytes: [49, 53], tag: N(Int) }))
CompileAssignment(target=Constant(Tk { id: Name, bytes: [121], tag: Ident }), value=Constant(Tk { id: Number, bytes: [52, 53, 106], tag: N(Complex) }))
CompileAssignment(target=Constant(Tk { id: Name, bytes: [122], tag: Ident }), value=BinOp { op: Op(Tk { id: Plus, bytes: [43], tag: None }), left: Constant(Tk { id: Name, bytes: [120], tag: Ident }), right: Constant(Tk { id: Name, bytes: [121], tag: Ident }) })
CompileBinOp(Op(Tk { id: Plus, bytes: [43], tag: None }) Constant(Tk { id: Name, bytes: [120], tag: Ident }) Constant(Tk { id: Name, bytes: [121], tag: Ident }))

Compiled Instructions (8):
--------------------------------
 LoadConst 15              
 StoreName x               
 LoadConst 45j             
 StoreName y               
  LoadName x               
  LoadName y               
 BinaryAdd
 StoreName z

test compiler::tests::compile_1 ... ok

test result: ok. 1 passed; 0 failed; 0 ignored; 0 measured


====================
From IPython
====================

In [9]: import dis; c = compile("""
   ...: x = 15
   ...: y = 45j
   ...: z = x + y
   ...: """, "", "exec"); dis.dis(c)
   ...:
  2           0 LOAD_CONST               0 (15)
              3 STORE_NAME               0 (x)

  3           6 LOAD_CONST               1 (45j)
              9 STORE_NAME               1 (y)

  4          12 LOAD_NAME                0 (x)
             15 LOAD_NAME                1 (y)
             18 BINARY_ADD
             19 STORE_NAME               2 (z)
             22 LOAD_CONST               2 (None)
             25 RETURN_VALUE
