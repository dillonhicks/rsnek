* RSNEK Notes
** <2017-03-26 Sun>

   Work started to converge about how to initalize instances of
   builtin types so as the cleanup happens.

   Due to this I have decided to start trying to interface out what it
   means to initialize an instance of a type. The work on this is
   centered around the BuiltinTypeAPI (will probably change names to
   the PrimitiveTypeAPI) which is not part of the current object
   model.

   The design is for the new and alloc methods to create reference
   counted and "unmanaged" instances of the type, respectively. Since
   the builtin types are hard coded and do not necessarily conform to
   and object __getattr__ style dispatch I think this will make it
   easy for the Runtime to hanve an index of these type and make it
   easy to creat them with PyTypeName::new(&rt) and
   PyTypeName::alloc() where need be.

   The types themselves should contain the necessary singletons and
   interning code to prevent too much object churn for the immutable
   builtin types (str, int, bool, tuple, etc).

   Current Work:

   I left off at PyInteger as I was trying to refactor the Builtin
   enum to use the new trait based object model. Note that this means
   that the .to() methods should be deprecated in favor of the
   Type::new.

   Ideas:

   1. Add a method to the BuiltinTypeAPI to wrap in the pertinent Builtin
      discriminator.
   2. It is apparent as the generic __dict__ backed object is created
      that a native method wrapper capable of dynamic dispatch will be
      necessary.

   Goals:

   1. Finish refactor to trait based model
   2. Get MVP of the BuiltinTypeAPI integrated into existing types
   3. Fix tests
   4. Get the __dict__ powered object type functional enough to handle the
     dot lookup case of  __getattr__ -> method -> __call__ case.
