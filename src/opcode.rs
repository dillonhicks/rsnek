use std::convert::From;


#[derive(Debug)]
#[repr(u8)]
pub enum OpCode {
    Skip = 0,
    /* Instruction opcodes for compiled code */
    PopTop = 1,
    RotTwo = 2,
    RotThree = 3,
    DupTop = 4,
    DupTopTwo = 5,
    NOP = 9,
    UnaryPositive = 10,
    UnaryNegative = 11,
    UnaryNot = 12,
    UnaryInvert = 15,
    BinaryMatrixMultiply = 16,
    InplaceMatrixMultiply = 17,
    BinaryPower = 19,
    BinaryMultiply = 20,
    BinaryModulo = 22,
    BinaryAdd = 23,
    BinarySubtract = 24,
    BinarySubscr = 25,
    BinaryFloorDivide = 26,
    BinaryTrueDivide = 27,
    InplaceFloorDivide = 28,
    InplaceTrueDivide = 29,
    GetAiter = 50,
    GetAnext = 51,
    BeforeAsyncWith = 52,
    InplaceAdd = 55,
    InplaceSubtract = 56,
    InplaceMultiply = 57,
    InplaceModulo = 59,
    StoreSubscr = 60,
    DeleteSubscr = 61,
    BinaryLshift = 62,
    BinaryRshift = 63,
    BinaryAnd = 64,
    BinaryXor = 65,
    BinaryOr = 66,
    InplacePower = 67,
    GetIter = 68,
    GetYieldFromIter = 69,
    PrintExpr = 70,
    LoadBuildClass = 71,
    YieldFrom = 72,
    GetAwaitable = 73,
    InplaceLshift = 75,
    InplaceRshift = 76,
    InplaceAnd = 77,
    InplaceXor = 78,
    InplaceOr = 79,
    BreakLoop = 80,
    WithCleanupStart = 81,
    WithCleanupFinish = 82,
    ReturnValue = 83,
    ImportStar = 84,
    SetupAnnotations = 85,
    YieldValue = 86,
    PopBlock = 87,
    EndFinally = 88,
    PopExcept = 89,
    //HAVE_ARGUMENT            =90,
    StoreName = 90,
    DeleteName = 91,
    UnpackSequence = 92,
    ForIter = 93,
    UnpackEx = 94,
    StoreAttr = 95,
    DeleteAttr = 96,
    StoreGlobal = 97,
    DeleteGlobal = 98,
    LoadConst = 100,
    LoadName = 101,
    BuildTuple = 102,
    BuildList = 103,
    BuildSet = 104,
    BuildMap = 105,
    LoadAttr = 106,
    CompareOp = 107,
    ImportName = 108,
    ImportFrom = 109,
    JumpForward = 110,
    JumpIfFalseOrPop = 111,
    JumpIfTrueOrPop = 112,
    JumpAbsolute = 113,
    PopJumpIfFalse = 114,
    PopJumpIfTrue = 115,
    LoadGlobal = 116,
    ContinueLoop = 119,
    SetupLoop = 120,
    SetupExcept = 121,
    SetupFinally = 122,
    LoadFast = 124,
    StoreFast = 125,
    DeleteFast = 126,
    StoreAnnotation = 127,
    RaiseVarargs = 130,
    CallFunction = 131,
    MakeFunction = 132,
    BuildSlice = 133,
    LoadClosure = 135,
    LoadDeref = 136,
    StoreDeref = 137,
    DeleteDeref = 138,
    CallFunctionKw = 141,
    CallFunctionEx = 142,
    SetupWith = 143,
    ExtendedArg = 144,
    ListAppend = 145,
    SetAdd = 146,
    MapAdd = 147,
    LoadClassderef = 148,
    BuildListUnpack = 149,
    BuildMapUnpack = 150,
    BuildMapUnpackWithCall = 151,
    BuildTupleUnpack = 152,
    BuildSetUnpack = 153,
    SetupAsyncWith = 154,
    FormatValue = 155,
    BuildConstKeyMap = 156,
    BuildString = 157,
    BuildTupleUnpackWithCall = 158,
}


impl From<u8> for OpCode {
    fn from(n: u8) ->  OpCode {
        return match n {
            1 => OpCode::PopTop,
            2 => OpCode::RotTwo,
            3 => OpCode::RotThree,
            4 => OpCode::DupTop,
            5 => OpCode::DupTopTwo,
            9 => OpCode::NOP,
            10 => OpCode::UnaryPositive,
            11 => OpCode::UnaryNegative,
            12 => OpCode::UnaryNot,
            15 => OpCode::UnaryInvert,
            16 => OpCode::BinaryMatrixMultiply,
            17 => OpCode::InplaceMatrixMultiply,
            19 => OpCode::BinaryPower,
            20 => OpCode::BinaryMultiply,
            22 => OpCode::BinaryModulo,
            23 => OpCode::BinaryAdd,
            24 => OpCode::BinarySubtract,
            25 => OpCode::BinarySubscr,
            26 => OpCode::BinaryFloorDivide,
            27 => OpCode::BinaryTrueDivide,
            28 => OpCode::InplaceFloorDivide,
            29 => OpCode::InplaceTrueDivide,
            50 => OpCode::GetAiter,
            51 => OpCode::GetAnext,
            52 => OpCode::BeforeAsyncWith,
            55 => OpCode::InplaceAdd,
            56 => OpCode::InplaceSubtract,
            57 => OpCode::InplaceMultiply,
            59 => OpCode::InplaceModulo,
            60 => OpCode::StoreSubscr,
            61 => OpCode::DeleteSubscr,
            62 => OpCode::BinaryLshift,
            63 => OpCode::BinaryRshift,
            64 => OpCode::BinaryAnd,
            65 => OpCode::BinaryXor,
            66 => OpCode::BinaryOr,
            67 => OpCode::InplacePower,
            68 => OpCode::GetIter,
            69 => OpCode::GetYieldFromIter,
            70 => OpCode::PrintExpr,
            71 => OpCode::LoadBuildClass,
            72 => OpCode::YieldFrom,
            73 => OpCode::GetAwaitable,
            75 => OpCode::InplaceLshift,
            76 => OpCode::InplaceRshift,
            77 => OpCode::InplaceAnd,
            78 => OpCode::InplaceXor,
            79 => OpCode::InplaceOr,
            80 => OpCode::BreakLoop,
            81 => OpCode::WithCleanupStart,
            82 => OpCode::WithCleanupFinish,
            83 => OpCode::ReturnValue,
            84 => OpCode::ImportStar,
            85 => OpCode::SetupAnnotations,
            86 => OpCode::YieldValue,
            87 => OpCode::PopBlock,
            88 => OpCode::EndFinally,
            89 => OpCode::PopExcept,
            90 => OpCode::StoreName,
            91 => OpCode::DeleteName,
            92 => OpCode::UnpackSequence,
            93 => OpCode::ForIter,
            94 => OpCode::UnpackEx,
            95 => OpCode::StoreAttr,
            96 => OpCode::DeleteAttr,
            97 => OpCode::StoreGlobal,
            98 => OpCode::DeleteGlobal,
            100 => OpCode::LoadConst,
            101 => OpCode::LoadName,
            102 => OpCode::BuildTuple,
            103 => OpCode::BuildList,
            104 => OpCode::BuildSet,
            105 => OpCode::BuildMap,
            106 => OpCode::LoadAttr,
            107 => OpCode::CompareOp,
            108 => OpCode::ImportName,
            109 => OpCode::ImportFrom,
            110 => OpCode::JumpForward,
            111 => OpCode::JumpIfFalseOrPop,
            112 => OpCode::JumpIfTrueOrPop,
            113 => OpCode::JumpAbsolute,
            114 => OpCode::PopJumpIfFalse,
            115 => OpCode::PopJumpIfTrue,
            116 => OpCode::LoadGlobal,
            119 => OpCode::ContinueLoop,
            120 => OpCode::SetupLoop,
            121 => OpCode::SetupExcept,
            122 => OpCode::SetupFinally,
            124 => OpCode::LoadFast,
            125 => OpCode::StoreFast,
            126 => OpCode::DeleteFast,
            127 => OpCode::StoreAnnotation,
            130 => OpCode::RaiseVarargs,
            131 => OpCode::CallFunction,
            132 => OpCode::MakeFunction,
            133 => OpCode::BuildSlice,
            135 => OpCode::LoadClosure,
            136 => OpCode::LoadDeref,
            137 => OpCode::StoreDeref,
            138 => OpCode::DeleteDeref,
            141 => OpCode::CallFunctionKw,
            142 => OpCode::CallFunctionEx,
            143 => OpCode::SetupWith,
            144 => OpCode::ExtendedArg,
            145 => OpCode::ListAppend,
            146 => OpCode::SetAdd,
            147 => OpCode::MapAdd,
            148 => OpCode::LoadClassderef,
            149 => OpCode::BuildListUnpack,
            150 => OpCode::BuildMapUnpack,
            151 => OpCode::BuildMapUnpackWithCall,
            152 => OpCode::BuildTupleUnpack,
            153 => OpCode::BuildSetUnpack,
            154 => OpCode::SetupAsyncWith,
            155 => OpCode::FormatValue,
            156 => OpCode::BuildConstKeyMap,
            157 => OpCode::BuildString,
            158 => OpCode::BuildTupleUnpackWithCall,
            _ => OpCode::Skip
        }
        
    }
}